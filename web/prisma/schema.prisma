// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String         @id @default(cuid())
  name                  String?
  email                 String?        @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole       @default(USER)
  accounts              Account[]
  skillsWanted          Skill[]
  skillsOffered         Skill[]
  availability          Availability?
  isPublic              Boolean        @default(true)
  sentNotifications     Notification[] @relation("SentNotifications")
  receivedNotifications Notification[] @relation("ReceivedNotifications")
}

enum Skill {
  PROGRAMMING
  DESIGN
  WRITING
  MARKETING
  MUSIC
  COOKING
  PUBLIC_SPEAKING
  VIDEO_EDITING
  DATA_ANALYSIS
}

enum Availability {
  WEEKDAYS
  WEEKENDS
  ALL_WEEK
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Notification {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  message    String
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())

  sender   User @relation("SentNotifications", fields: [senderId], references: [id])
  receiver User @relation("ReceivedNotifications", fields: [receiverId], references: [id])
}
